{"version":3,"file":"angular-perfect-scrollbar-compiled.js","names":["_perfectScrollbar","_interopRequireDefault","require","_angular","obj","__esModule","_default","angular","module","directive","$parse","$window","psOptions","restrict","transclude","template","replace","link","$scope","$elem","$attr","jqWindow","element","options","i","l","length","opt","undefined","$evalAsync","ps","initialize","$watch","selector","find","height","width","newValue","oldValue","update","event","scrollDown","setTimeout","bind","refreshOnChange","$watchCollection","refreshOnResize","on","$on","off","destroy","name","exports"],"sources":["../../src/js/angular-perfect-scrollbar.js"],"sourcesContent":["import ps from 'perfect-scrollbar';\nimport angular from 'angular';\n\nexport default angular.module('perfect_scrollbar', [])\n    .directive('perfectScrollbar',\n        ['$parse', '$window', function ($parse, $window) {\n            var psOptions = [\n                'wheelSpeed', 'wheelPropagation', 'minScrollbarLength', 'useBothWheelAxes',\n                'useKeyboard', 'suppressScrollX', 'suppressScrollY', 'scrollXMarginOffset',\n                'scrollYMarginOffset', 'includePadding'//, 'onScroll', 'scrollDown'\n            ];\n\n            return {\n                restrict: 'EA',\n                transclude: true,\n                template: '<div><div class=\"scroll-transclude-content\" ng-transclude></div></div>',\n                replace: true,\n                link: function ($scope, $elem, $attr) {\n                    var jqWindow = angular.element($window);\n                    var options = {};\n\n                    for (var i = 0, l = psOptions.length; i < l; i++) {\n                        var opt = psOptions[i];\n                        if ($attr[opt] !== undefined) {\n                            options[opt] = $parse($attr[opt])();\n                        }\n                    }\n\n                    $scope.$evalAsync(function () {\n                        ps.initialize($elem[0], options);\n                        // $elem.perfectScrollbar(options);\n                        // var onScrollHandler = $parse($attr.onScroll)\n                        // $elem.scroll(function(){\n                        //   var scrollTop = $elem.scrollTop()\n                        //   var scrollHeight = $elem.prop('scrollHeight') - $elem.height()\n                        //   $scope.$apply(function() {\n                        //     onScrollHandler($scope, {\n                        //       scrollTop: scrollTop,\n                        //       scrollHeight: scrollHeight\n                        //     })\n                        //   })\n                        // });\n                    });\n\n                    // Automatically update when content height changes\n                    $scope.$watch(function () {\n                        const selector = $elem.find('.scroll-transclude-content');\n                        return selector.height() + '-' + selector.width() ;\n                    }, function (newValue, oldValue) {\n                        if (newValue) {\n                            update('contentSizeChange');\n                        }\n                    });\n\n                    // Automatically update when container height changes\n                    $scope.$watch(function () {\n                        return $elem.height() + '-' + $elem.width();\n                    }, function (newValue, oldValue) {\n                        if (newValue) {\n                            update('contentSizeChange');\n                        }\n                    });\n\n                    function update(event) {\n                        $scope.$evalAsync(function () {\n                            if ($attr.scrollDown == 'true' && event != 'mouseenter') {\n                                setTimeout(function () {\n\n                                    ps.update($elem[0]);\n                                    return;\n                                    // $($elem).scrollTop($($elem).prop(\"scrollHeight\"));\n                                }, 100);\n                            }\n                            ps.update($elem[0]);\n                            // $elem.perfectScrollbar('update');\n                        });\n                    }\n\n                    // This is necessary when you don't watch anything with the scrollbar\n                    $elem.bind('mouseenter', update('mouseenter'));\n\n                    // Possible future improvement - check the type here and use the appropriate watch for non-arrays\n                    if ($attr.refreshOnChange) {\n                        $scope.$watchCollection($attr.refreshOnChange, function () {\n                            update();\n                        });\n                    }\n\n                    // this is from a pull request - I am not totally sure what the original issue is but seems harmless\n                    if ($attr.refreshOnResize) {\n                        jqWindow.on('resize', update);\n                    }\n\n                    // use to force rendering refresh\n                    $scope.$on('refreshScrollbars', function () {\n                        update();\n                    });\n\n                    $scope.$on('$destroy', function () {\n                        jqWindow.off('resize', update);\n                        ps.destroy($elem[0]);\n                    });\n                }\n            };\n        }]\n    )\n    .name;\n"],"mappings":"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"}