{"version":3,"sources":["../../src/js/angular-perfect-scrollbar.js"],"names":["angular","module","directive","$parse","$window","psOptions","restrict","transclude","template","replace","link","$scope","$elem","$attr","jqWindow","element","options","i","l","length","opt","undefined","$evalAsync","ps","initialize","$watch","selector","find","height","width","newValue","oldValue","update","event","scrollDown","setTimeout","bind","refreshOnChange","$watchCollection","refreshOnResize","on","$on","off","destroy","name"],"mappings":"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","file":"angular-perfect-scrollbar-compiled.js","sourcesContent":["import ps from 'perfect-scrollbar';\r\nimport angular from 'angular';\r\n\r\nexport default angular.module('perfect_scrollbar', [])\r\n    .directive('perfectScrollbar',\r\n        ['$parse', '$window', function ($parse, $window) {\r\n            var psOptions = [\r\n                'wheelSpeed', 'wheelPropagation', 'minScrollbarLength', 'useBothWheelAxes',\r\n                'useKeyboard', 'suppressScrollX', 'suppressScrollY', 'scrollXMarginOffset',\r\n                'scrollYMarginOffset', 'includePadding'//, 'onScroll', 'scrollDown'\r\n            ];\r\n\r\n            return {\r\n                restrict: 'EA',\r\n                transclude: true,\r\n                template: '<div><div class=\"scroll-transclude-content\" ng-transclude></div></div>',\r\n                replace: true,\r\n                link: function ($scope, $elem, $attr) {\r\n                    var jqWindow = angular.element($window);\r\n                    var options = {};\r\n\r\n                    for (var i = 0, l = psOptions.length; i < l; i++) {\r\n                        var opt = psOptions[i];\r\n                        if ($attr[opt] !== undefined) {\r\n                            options[opt] = $parse($attr[opt])();\r\n                        }\r\n                    }\r\n\r\n                    $scope.$evalAsync(function () {\r\n                        ps.initialize($elem[0], options);\r\n                        // $elem.perfectScrollbar(options);\r\n                        // var onScrollHandler = $parse($attr.onScroll)\r\n                        // $elem.scroll(function(){\r\n                        //   var scrollTop = $elem.scrollTop()\r\n                        //   var scrollHeight = $elem.prop('scrollHeight') - $elem.height()\r\n                        //   $scope.$apply(function() {\r\n                        //     onScrollHandler($scope, {\r\n                        //       scrollTop: scrollTop,\r\n                        //       scrollHeight: scrollHeight\r\n                        //     })\r\n                        //   })\r\n                        // });\r\n                    });\r\n\r\n                    // Automatically update when content height changes\r\n                    $scope.$watch(function () {\r\n                        const selector = $elem.find('.scroll-transclude-content');\r\n                        return selector.height() + '-' + selector.width() ;\r\n                    }, function (newValue, oldValue) {\r\n                        if (newValue) {\r\n                            update('contentSizeChange');\r\n                        }\r\n                    });\r\n\r\n                    // Automatically update when container height changes\r\n                    $scope.$watch(function () {\r\n                        return $elem.height() + '-' + $elem.width();\r\n                    }, function (newValue, oldValue) {\r\n                        if (newValue) {\r\n                            update('contentSizeChange');\r\n                        }\r\n                    });\r\n\r\n                    function update(event) {\r\n                        $scope.$evalAsync(function () {\r\n                            if ($attr.scrollDown == 'true' && event != 'mouseenter') {\r\n                                setTimeout(function () {\r\n\r\n                                    ps.update($elem[0]);\r\n                                    return;\r\n                                    // $($elem).scrollTop($($elem).prop(\"scrollHeight\"));\r\n                                }, 100);\r\n                            }\r\n                            ps.update($elem[0]);\r\n                            // $elem.perfectScrollbar('update');\r\n                        });\r\n                    }\r\n\r\n                    // This is necessary when you don't watch anything with the scrollbar\r\n                    $elem.bind('mouseenter', update('mouseenter'));\r\n\r\n                    // Possible future improvement - check the type here and use the appropriate watch for non-arrays\r\n                    if ($attr.refreshOnChange) {\r\n                        $scope.$watchCollection($attr.refreshOnChange, function () {\r\n                            update();\r\n                        });\r\n                    }\r\n\r\n                    // this is from a pull request - I am not totally sure what the original issue is but seems harmless\r\n                    if ($attr.refreshOnResize) {\r\n                        jqWindow.on('resize', update);\r\n                    }\r\n\r\n                    $scope.$on('$destroy', function () {\r\n                        jqWindow.off('resize', update);\r\n                        ps.destroy($elem[0]);\r\n                    });\r\n                }\r\n            };\r\n        }]\r\n    )\r\n    .name;\r\n"]}